import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '8292941228:AAGdBOz2G960O1dPiWJfqmbEpfIdDS7y3hY'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_faculty = State()


# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
questions_bank = [
    {
        "question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
        "options": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"],
        "correct_answer": 0
    },
    {
        "question": "2 + 2 = ?",
        "options": ["3", "4", "5", "6"],
        "correct_answer": 1
    },
    {
        "question": "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?",
        "options": ["–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω"],
        "correct_answer": 2
    }
]


# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
class QuizStates(StatesGroup):
    waiting_for_answer = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–†–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        ],
        resize_keyboard=True
    )


def get_auth_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")]],
        resize_keyboard=True
    )


def get_edit_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–º—è"), KeyboardButton(text="–§–∞–∫—É–ª—å—Ç–µ—Ç")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in users_data:
        users_data[user_id] = {
            "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "faculty": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "points": 0,
            "energy": 100,
            "solved_questions": 0,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            "profile_completed": False
        }

        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]],
                resize_keyboard=True
            )
        )
    else:
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )


# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(lambda message: message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def start_profile_fill(message: types.Message):
    user_id = message.from_user.id

    if user_id not in users_data:
        users_data[user_id] = {
            "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "faculty": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "points": 0,
            "profile_completed": False
        }

    user_data = users_data[user_id]

    if user_data["profile_completed"]:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω.")
        return

    await message.answer(
        "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_keyboard()
    )


# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id

    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]],
            resize_keyboard=True
        ))
        return

    user_data = users_data[user_id]

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üè∑Ô∏è <b>–ò–º—è:</b> {user_data['name']}\n"
        f"üéì <b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {user_data['faculty']}\n"
        f"‚≠ê <b>–û—á–∫–∏:</b> {user_data['points']}\n"
        f"‚ö° <b>–≠–Ω–µ—Ä–≥–∏—è:</b> {user_data.get('energy', 100)}/100\n"
        f"‚úÖ <b>–†–µ—à–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {user_data.get('solved_questions', 0)}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω' if user_data['profile_completed'] else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'}"
    )

    await message.answer(profile_text, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(lambda message: message.text in ["–ò–º—è", "–§–∞–∫—É–ª—å—Ç–µ—Ç"])
async def choose_field_to_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]],
            resize_keyboard=True
        ))
        return

    if users_data[user_id]["profile_completed"]:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω.")
        return

    field = message.text.lower()

    if field == "–∏–º—è":
        await state.set_state(ProfileStates.waiting_for_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    elif field == "—Ñ–∞–∫—É–ª—å—Ç–µ—Ç":
        await state.set_state(ProfileStates.waiting_for_faculty)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=types.ReplyKeyboardRemove())


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == QuizStates.waiting_for_answer:
        await state.clear()
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=get_main_keyboard())
    else:
        await state.clear()
        user_id = message.from_user.id

        if user_id in users_data and users_data[user_id]["profile_completed"]:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        else:
            await message.answer(
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]],
                    resize_keyboard=True
                )
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(ProfileStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text.strip() == "":
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    users_data[user_id]["name"] = message.text
    await check_profile_completion(user_id)
    await state.clear()

    if users_data[user_id]["profile_completed"]:
        await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_edit_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@dp.message(ProfileStates.waiting_for_faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text.strip() == "":
        await message.answer("–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    users_data[user_id]["faculty"] = message.text
    await check_profile_completion(user_id)
    await state.clear()

    if users_data[user_id]["profile_completed"]:
        await message.answer("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_edit_keyboard())


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def check_profile_completion(user_id):
    user_data = users_data[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (user_data["name"] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and
            user_data["faculty"] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and
            user_data["name"].strip() != "" and
            user_data["faculty"].strip() != ""):
        users_data[user_id]["profile_completed"] = True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message(lambda message: message.text == "–†–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
async def solve_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!", reply_markup=get_auth_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —ç–Ω–µ—Ä–≥–∏–∏
    if users_data[user_id].get("energy", 100) < 20:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ 20 –µ–¥–∏–Ω–∏—Ü.", reply_markup=get_main_keyboard())
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    import random
    question_data = random.choice(questions_bank)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in question_data["options"]],
        resize_keyboard=True
    )

    # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
    users_data[user_id]["energy"] -= 20

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(
        correct_index=question_data["correct_answer"],
        correct_answer=question_data["options"][question_data["correct_answer"]]
    )

    await message.answer(
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question_data['question']}\n\n"
        f"‚ö° <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏:</b> 20\n"
        f"üîã <b>–û—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏:</b> {users_data[user_id]['energy']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
        reply_markup=options_keyboard,
        parse_mode='HTML'
    )


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–∏–∏)
@dp.message(QuizStates.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_answer = message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    correct_answer = data["correct_answer"]
    correct_index = data["correct_index"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        users_data[user_id]["points"] += 1
        users_data[user_id]["solved_questions"] += 1
        response_text = (
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
            "+1 –æ—á–∫–æ\n"
            "+1 –∫ —Ä–µ—à–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
            f"‚ö° <b>–≠–Ω–µ—Ä–≥–∏—è:</b> {users_data[user_id]['energy']}/100"
        )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_text = (
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            f"‚ö° <b>–≠–Ω–µ—Ä–≥–∏—è:</b> {users_data[user_id]['energy']}/100"
        )

    await state.clear()
    await message.answer(response_text, parse_mode='HTML', reply_markup=get_main_keyboard())


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@dp.message(Command("users"))
async def show_users(message: types.Message):
    user_id = message.from_user.id

    if len(users_data) == 0:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    users_list = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for uid, data in users_data.items():
        users_list += f"ID: {uid}\n–ò–º—è: {data['name']}\n–§–∞–∫—É–ª—å—Ç–µ—Ç: {data['faculty']}\n–û—á–∫–∏: {data['points']}\n–≠–Ω–µ—Ä–≥–∏—è: {data.get('energy', 100)}\n–†–µ—à–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {data.get('solved_questions', 0)}\n–°—Ç–∞—Ç—É—Å: {'‚úÖ' if data['profile_completed'] else '‚ö†Ô∏è'}\n\n"
    await message.answer(users_list)


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
@dp.message(Command("energy"))
async def check_energy(message: types.Message):
    user_id = message.from_user.id

    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!")
        return

    await message.answer(
        f"‚ö° <b>–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è:</b> {users_data[user_id].get('energy', 100)}/100\n"
        "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç 20 —ç–Ω–µ—Ä–≥–∏–∏",
        parse_mode='HTML'
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(Command("reset_me"))
async def reset_my_profile(message: types.Message):
    user_id = message.from_user.id

    if user_id in users_data:
        users_data[user_id] = {
            "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "faculty": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "points": 0,
            "energy": 100,
            "solved_questions": 0,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å —Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            "profile_completed": False
        }

        await message.answer(
            "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]],
                resize_keyboard=True
            )
        )
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())