from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from routers.auth.states import RegisterStates
from routers.shared.keyboards import delete_markup
from utils.models import conn, User, Faculty
from utils.templateutil import render

router = Router(name=__name__)


@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    with conn() as session:
        user = session.get(User, message.chat.id)
    msg = await message.answer(text=render("assets/templates/auth/hello.html", user=user))
    if not user:
        print(1)
        await state.set_state(RegisterStates.username)
        await state.update_data(msg_id=msg.message_id)
    await message.delete()


@router.message(RegisterStates.username)
async def handle_register_username(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(text=render("assets/templates/shared/incorrect_message.html", exception="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"),
                             reply_markup=delete_markup)
        await message.delete()
        return
    await state.update_data(username=message.text)
    msg_id = await state.get_value("msg_id")
    await message.bot.edit_message_text(text=render("assets/templates/auth/enter_faculty.html", username=message.text),
                                        chat_id=message.chat.id, message_id=msg_id)
    await message.delete()
    await state.set_state(RegisterStates.faculty)


@router.message(RegisterStates.faculty)
async def handle_register_faculty(message: types.Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer(text=render("assets/templates/shared/incorrect_message.html",
                                         exception="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ" if not message.text else "–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"),
                             reply_markup=delete_markup)
        await message.delete()
        return
    with conn() as session:
        #–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞ –±–µ–∑ –ë–î
        faculty = 2
        #faculty = session.get(Faculty, int(message.text))
    if not faculty:
        await message.answer(text=render("assets/templates/shared/incorrect_message.html",
                                         exception="–¢–∞–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"), reply_markup=delete_markup)
        await message.delete()
        return
    data = await state.get_data()
    
    # –¥–∞–ª—å—à–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å, –≤ —Å–ª—É—á–∞–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–¥, –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º state –Ω–∞ register_username
    # –í–∞–∫—Ö–∞–Ω–∞–ª–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton(text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
        ],
        resize_keyboard=True
        )
    
    await message.bot.edit_message_text(
        text=render("assets/templates/auth/check_data.html", username=data["username"], faculty=2),
        chat_id=message.chat.id, 
        message_id=data["msg_id"], 
        reply_markup=keyboard
    )
    await message.delete()
    
@router.callback_query(lambda callback: callback.data == "confirm")
async def handle_inline_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await state.clear()
    await callback.message.edit_text(text=render("assets/templates/auth/registration_finished.html")) # —à–∞–±–ª–æ–Ω—ã
    await callback.answer()
    
@router.callback_query(lambda callback: callback.data == "restart")
async def handle_inline_restart(callback: CallbackQuery, state: FSMContext):
    msg_id = callback.message.message_id
    await callback.message.bot.edit_message_text(
        text=render("assets/templates/auth/restart_registration.html", username=callback.message.text),
        chat_id=callback.message.chat.id, 
        message_id=msg_id
    )
    await state.set_state(RegisterStates.username)
    await state.update_data(msg_id=msg_id)
    await callback.answer()
